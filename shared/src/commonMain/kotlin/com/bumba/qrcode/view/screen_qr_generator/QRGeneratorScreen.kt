package com.bumba.qrcode.view.screen_qr_generator

import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.fadeIn
import androidx.compose.animation.fadeOut
import androidx.compose.animation.slideInHorizontally
import androidx.compose.animation.slideOutHorizontally
import androidx.compose.foundation.*
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardActions
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Refresh
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import com.bumba.qrcode.util.Platform
import com.bumba.qrcode.util.getPlatform
import com.bumba.qrcode.view.icon.BackButton
import com.bumba.qrcode.view.icon.iconShare

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun QRGeneratorScreen(viewModel: QRGeneratorViewModel) {
    val state = viewModel.state.value
    var inputText by rememberSaveable { mutableStateOf("") }
    var isInputTextError by rememberSaveable { mutableStateOf(false) }
    var isQRCodeGenerated by rememberSaveable { mutableStateOf(false) }
    val backgroundColor = remember { mutableStateOf(Color.White) }

    Scaffold(
        topBar = {
            ScreenTopBar(isNavigationEnable = isQRCodeGenerated) {
                isQRCodeGenerated = false
                backgroundColor.value = Color.White
            }
        },
        containerColor = backgroundColor.value
    ) {
        Column(
            verticalArrangement = Arrangement.Center,
            horizontalAlignment = Alignment.CenterHorizontally,
            modifier = Modifier.fillMaxSize()
                .verticalScroll(rememberScrollState())
                .padding(all = 16.dp),
        ) {
            if (isQRCodeGenerated) {
                inputText = ""
                backgroundColor.value = MaterialTheme.colorScheme.primary

                Box(
                    contentAlignment = Alignment.Center,
                    modifier = Modifier
                        .background(Color.White)
                        .border(BorderStroke(3.dp, Color.Black))
                        .size(300.dp)
                ) {
                    when (state) {
                        is QRGeneratorState.Loading -> {
                            QRCodeShimmer()
                        }

                        is QRGeneratorState.Error -> {
                            IconButton(onClick = {
                                viewModel.onGenerateQRCode(inputText)
                            }) {
                                Icon(
                                    imageVector = Icons.Default.Refresh,
                                    contentDescription = "Regenerate",
                                    modifier = Modifier.size(150.dp),
                                    tint = Color.Red
                                )
                            }
                        }

                        is QRGeneratorState.Success -> {
                            Image(
                                bitmap = state.qrCode,
                                contentScale = ContentScale.Fit,
                                contentDescription = "QR Code",
                                modifier = Modifier
                                    .fillMaxSize(if (getPlatform() == Platform.IOS) .8f else 1f)
                            )
                        }
                    }
                }

                Spacer(modifier = Modifier.height(32.dp))
                OutlinedButton(
                    onClick = {
                        if (state is QRGeneratorState.Success)
                            viewModel.onShare(state.qrCode)
                    },
                    border = BorderStroke(3.dp, Color.Black),
                    shape = RoundedCornerShape(10.dp),
                    colors = ButtonDefaults.buttonColors(contentColor = Color.Black)
                ) {
                    Icon(
                        imageVector = iconShare,
                        contentDescription = "Share Icon",
                        modifier = Modifier.size(40.dp)
                    )
                }
            } else {
                Text(
                    text = "Gerar QR Code",
                    style = MaterialTheme.typography.displayMedium,
                    fontWeight = FontWeight.Bold
                )
                Spacer(modifier = Modifier.height(48.dp))
                OutlinedTextField(
                    value = inputText,
                    onValueChange = {
                        inputText = it
                        isInputTextError = inputText.isBlank()
                    },
                    label = { Text("texto", style = MaterialTheme.typography.titleMedium) },
                    textStyle = MaterialTheme.typography.titleMedium,
                    singleLine = false,
                    supportingText = {
                        if (isInputTextError) {
                            Text(
                                modifier = Modifier.fillMaxWidth(),
                                text = "Text input is too short",
                                textAlign = TextAlign.Start,
                                color = Color.Red
                            )
                        }
                    },
                    isError = isInputTextError,
                    keyboardActions = KeyboardActions(onGo = {
                        if (inputText.isBlank()) {
                            isInputTextError = inputText.isBlank()
                            return@KeyboardActions
                        }
                        viewModel.onGenerateQRCode(inputText)
                        isQRCodeGenerated = true
                    }),
                    keyboardOptions = KeyboardOptions.Default.copy(imeAction = ImeAction.Go),
                    modifier = Modifier.fillMaxWidth(1f)
                )
                Spacer(modifier = Modifier.height(32.dp))
                Button(
                    onClick = {
                        if (inputText.isBlank()) {
                            isInputTextError = inputText.isBlank()
                            return@Button
                        }
                        viewModel.onGenerateQRCode(inputText)
                        isQRCodeGenerated = true
                    },
                    shape = RoundedCornerShape(10.dp),
                    modifier = Modifier.height(50.dp).width(150.dp)
                ) {
                    Text(
                        text = "Generate",
                        style = MaterialTheme.typography.titleLarge
                    )
                }
            }
        }
    }
}


@OptIn(ExperimentalMaterial3Api::class)
@Composable
private fun ScreenTopBar(
    isNavigationEnable: Boolean,
    onNavigate: () -> Unit
) {
    TopAppBar(
        title = {
            AnimatedVisibility(
                visible = !isNavigationEnable,
                enter = fadeIn(),
                exit = fadeOut()
            ) {
                Text(
                    text = "QR Code",
                    style = MaterialTheme.typography.titleLarge,
                    fontWeight = FontWeight.Bold
                )
            }
        },
        navigationIcon = {
            AnimatedVisibility(
                visible = isNavigationEnable,
                enter = slideInHorizontally(),
                exit = slideOutHorizontally()
            ) {
                BackButton(onNavigate)
            }
        },
        colors = TopAppBarDefaults.largeTopAppBarColors(
            containerColor = Color.Transparent
        ),
        modifier = Modifier.padding(16.dp)
    )
}
